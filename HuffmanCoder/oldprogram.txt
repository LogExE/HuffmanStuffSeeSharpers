using System;
using System.IO;
using System.Collections.Generic;
using System.Collections;
using System.Text;

namespace HuffmanCoder
{
    internal class Program
    {
        static Dictionary<char, BitArray> Encode(Dictionary<char, int> elems)
        {
            var arr = new List<CodingNode>();
            foreach (var pair in elems)
                arr.Add(new CodingNode(pair.Key, pair.Value));

            for (int i = 0; i < elems.Count - 1; i++)
            {
                arr.Sort();
                arr[0] = new CodingNode(arr[0], arr[1]);
                arr.RemoveAt(1);
            }

            return arr[0].Traverse();
        }

        static BitArray ReadBits(byte[] src, byte count, ref int pos)
        {
            var res = new BitArray(count);
            for(byte i = 0; i < count; i++)
            {
                res[i] = src[pos / 8] >> (7 - pos % 8) == '1';
                ++pos;
            }
            return res;
        }

        static void WriteBits(List<byte> dst, BitArray value, ref int pos)
        {
            for (byte i = 0; i < value.Count; i++)
            {
                if (pos / 8 > dst.Count)
                    dst.Add(0);
                dst[pos / 8] += (byte)((value[i] ? 1 : 0) << (7 - pos % 8));
                ++pos;
            }
        }

        static void Main(string[] args)
        {
            Console.InputEncoding = Encoding.Unicode;
            Console.OutputEncoding = Encoding.Unicode;
#if DEBUG
            args = new string[] { "encode", "file.txt", "encoded.bin" };
            //args = new string[] { "decode", "encoded.bin", "decoded.txt" };
            Console.WriteLine("Compiled with DEBUG, passing arguments: " + string.Join(' ', args));
#endif
            if (args.Length <= 2)
            {
                Console.WriteLine("Please pass a command as an argument (encode or decode) with file name (in and out).");
                return;
            }

            string cmd = args[0];
            string fileName = args[1];
            string fileNameOut = args[2];

            if (cmd == "encode")
            {
                if (!File.Exists(fileName))
                {
                    Console.WriteLine("\"{0}\" doesn't exist!", fileName);
                    return;
                }
                string text = File.ReadAllText(fileName, Encoding.Unicode);
                var elems = new Dictionary<char, int>();
                foreach (char c in text)
                    if (elems.ContainsKey(c))
                        ++elems[c];
                    else elems[c] = 1;
                var encoded = Encode(elems);
#if DEBUG
                foreach (var p in encoded)
                {
                    var sb = new StringBuilder();

                    for (int i = 0; i < p.Value.Count; i++)
                    {
                        char c = p.Value[i] ? '1' : '0';
                        sb.Append(c);
                    }

                    Console.WriteLine("{0} {1}", p.Key, sb);
                }
#endif

                using var fs = File.Create(fileNameOut);
                using var bw = new BinaryWriter(fs, Encoding.Unicode);
                bw.Write(encoded.Count);

                foreach (var p in encoded)
                {
                    bw.Write(p.Key);
                    bw.Write(p.Value.Count);
                    byte[] bytes = new byte[p.Value.Count / 8 + (p.Value.Count % 8 == 0 ? 0 : 1)];
                    p.Value.CopyTo(bytes, 0);
                    bw.Write(bytes);
                }

                foreach (char charToEncode in text)
                {
                    BitArray bits = encoded[charToEncode];
                    byte[] bytes = new byte[bits.Count / 8 + (bits.Count % 8 == 0 ? 0 : 1)];
                    bits.CopyTo(bytes, 0);
                    bw.Write(bytes);
                }

                fs.Flush();

                Console.WriteLine("Done!");
            }
            else if (cmd == "decode")
            {
                if (!File.Exists(fileName))
                {
                    Console.WriteLine("\"{0}\" doesn't exist!", fileName);
                    return;
                }
                using var fs = File.OpenRead(fileName);
                using var br = new BinaryReader(fs, Encoding.Unicode);

                int cnt = br.ReadInt32();

                var codeToChar = new Dictionary<string, char>();

                for (int i = 0; i < cnt; i++)
                {
                    char charToRestore = br.ReadChar();
                    int bitCount = br.ReadInt32();

                    byte[] bytes = br.ReadBytes(bitCount / 8 + (bitCount % 8 == 0 ? 0 : 1));
                    var bitarr = new BitArray(bytes);

                    var sb = new StringBuilder();

                    for (int j = 0; j < bitCount; ++j)
                        sb.Append(bitarr[j] == false ? '0' : '1');

                    codeToChar.Add(sb.ToString(), charToRestore);
                }

                var code = new StringBuilder();
                var msg = new StringBuilder();

                while (fs.Position != fs.Length)
                { 
                    byte nextByte = br.ReadByte();
                    var byteBits = new BitArray(new byte[] { nextByte });
                    for (int k = 0; k < byteBits.Length; ++k)
                    {
                        code.Append(byteBits[k] ? '1' : '0');
                        string toStr = code.ToString();
                        if (codeToChar.ContainsKey(toStr))
                        {
                            msg.Append(codeToChar[toStr]);
                            code.Clear();
                            break;
                        }
                    }
                }

#if DEBUG
                Console.WriteLine(msg.ToString());
#endif
                File.WriteAllText(fileNameOut, msg.ToString());
                Console.WriteLine("Done!");
            }
            else Console.WriteLine("Command unrecognized!");
        }
    }
}
